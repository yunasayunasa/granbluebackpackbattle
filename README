Odyssey Engine v2.1 - ユーザーマニュアル (最終決定版・完全版)
1. はじめに：これは、あなたの物語のためのエンジンです
Odyssey Engineへようこそ。
このエンジンは、単なるツールではありません。幾多の困難なデバッグを経て、私達が共にたどり着いた「安定した物語の器」です。Phaser 3が持つパワフルな表現力と、ティラノスクリプトのような直感的な記述法。この二つを融合させ、ノベルゲームと他のジャンルを組み合わせた「ハイブリッドゲーム」を、誰もが創造できる世界を目指して生まれました。
このマニュアルは、その旅路に立つあなたのための、唯一無二の羅針盤です。
2. エンジンの設計思想：なぜ、こうなっているのか
このエンジンは、3つの強力な柱によって支えられています。
中央集権的なシーン管理 (SystemScene): シーン遷移という、ゲーム開発で最も不安定になりがちな処理を、司令塔であるSystemSceneに一任。あなたは「このシーンへ行け」と命令するだけで、エンジンが安全な遷移を保証します。
イベント駆動の状態管理 (StateManager): HPが減る、フラグが立つ。そういったゲーム内の「出来事」は、すべてStateManagerという唯一の状態管理者が記録します。UIやゲームロジックは、その変化を「聞く」だけで自動的に更新されるため、あなたはUIの表示を直接操作する必要がありません。
UIの完全な分離 (UIScene): HPバーやメッセージウィンドウは、UISceneという永続的なレイヤーが一元管理します。ゲームシーンはUIの存在を意識する必要がなく、物語のロジックに100%集中できます。
この設計により、あなたはコアエンジンを意識することなく、安心してゲーム固有のロジックとアセットの制作に没頭できるのです。
3. シナリオ入門：物語を記述する (.ksファイル)
ゲームの物語、演出、キャラクターの動きは、すべて.ksという拡張子のテキストファイルに記述します。
3.1. シナリオの基本構造
要素	書き方	役割
テキスト	テキストをそのまま記述	メッセージウィンドウに文章を表示（地の文）
セリフ	キャラクター名: テキスト	話者付きでセリフを表示
タグ	[タグ名 パラメータ=値]	演出、分岐、シーン遷移などの特殊な命令
ラベル	*ラベル名	[jump]や[link]のジャンプ先となる目印
コメント	; で始まる行	実行時に無視されるメモ
アセット宣言	@asset type=image key=... path=...	このシナリオで使うアセットを、シナリオ開始時に動的に読み込む
シナリオの例:
code
Text
; これはゲームに影響しないコメントです

; ▼ このシナリオで使うアセットを宣言します
@asset type=image key=bg_school path=backgrounds/school_day.png
@asset type=image key=yuko_smile path=characters/yuko_smile.png

*start
; 演出タグは連続で実行され、クリックを待ちません
[bg storage=bg_school]
[chara_show name=yuko storage=yuko_smile pos=center]

; テキストも、[p]タグが来るまでは止まりません
yuko:「こんにちは、世界！」
yuko:「これがOdyssey Engineよ！」

; [p]タグで、初めてクリックを待って改ページします
[p]

; [br]タグは、同じウィンドウの中で改行します
yuko:「とっても簡単でしょ？[br]さあ、始めましょう！」
[p]
[s]
3.2. テキストと改ページ・改行のルール
Odyssey Engineのテキスト制御は、非常にシンプルで強力なルールに基づいています。
タグ	役割	実行後の状態
[br]	文中改行 (Break)	同じメッセージ内で改行。シナリオは停止せず、処理を続行。
[p]	改ページ (Page Break / Pause)	クリック待ちになる。クリックされるとウィンドウがクリアされ、次の行へ。
(テキスト行)	文字表示	メッセージウィンドウに文字を表示するだけ。シナリオは停止しない。
このルールにより、**「演出タグを連続で実行し、最後に[p]で待つ」**といった、テンポの良いシナリオ記述が可能になります。
4. 変数について
Odyssey Engineには2種類の変数があり、ゲームの状態を記憶します。
ゲーム変数 (f.): 好感度、フラグ、所持金など、セーブデータに含まれる変数。
例: f.love_meter, f.item_get_flag
システム変数 (sf.): 既読管理、各種設定など、セーブデータとは別にゲーム全体で共有される変数。
例: sf.config_text_speed
変数の操作は、主に[eval]タグと[if]タグで行います。変数の値をテキスト中に表示するには &f.変数名 のように記述します。
5. タグ・リファレンス
タグはエンジンの力の源です。パラメータは 属性=値 の形式で、半角スペースで区切って複数指定できます。値にスペースを含みたい場合は " (ダブルクォート) で囲ってください。
カテゴリ: フロー制御
物語の流れを自在にコントロールします。
<details>
<summary><strong><code>[p]</code>, <code>[link]</code>, <code>[r]</code>, <code>[s]</code> - 待機と選択肢</strong></summary>
[p]: 改ページ（クリック待ち）
シナリオの進行を一時停止し、プレイヤーのクリックを待ちます。クリックされると、メッセージウィンドウがクリアされ、次の行の処理に進みます。テキストの区切りで最もよく使うタグです。
[link], [r], [s]: 選択肢の基本セット
この3つのタグはセットで使います。プレイヤーに選択を促すためのフローです。
[link text="ボタンの文字" target="*ジャンプ先"]: 選択肢を定義します。この時点では画面に表示されません。
[r] (Render): [link]で定義された選択肢を画面に表示します。
[s] (Stop): シナリオの進行を停止し、プレイヤーが選択肢をクリックするのを待ちます。
使用例:
code
Text
yuko:「今日はどこへ行く？」[p]

; 選択肢を定義
[link text="公園" target="*park"]
[link text="図書館" target="*library"]

; [r]で選択肢を表示する
[r]
; [s]でプレイヤーの選択を待つ。必須！
[s]

*park
; 公園のシナリオ...
[jump target="*common_route"]
</details>
<details>
<summary><strong><code>[if]</code>, <code>[jump]</code>, <code>[call]</code> - 分岐と遷移</strong></summary>
[if], [elsif], [else], [endif]: 条件分岐
変数の値に応じて、シナリオの実行内容を分岐させます。
[if exp="条件式"]: 条件式が真(true)の場合に実行。
条件式はJavaScriptの構文です。例: f.love >= 10, f.flag === true
[endif]で分岐の終わりを必ず示してください。
[jump]: ジャンプ
戻ってくることを想定しない、一方通行の移動です。現在のシナリオ実行を終了し、指定された場所へ移動します。
target="*ラベル名": 同じファイル内のラベルへ移動。
storage="SceneKey": 別のPhaserシーン（バトル、パズルなど）へ遷移。
params="{...}": storage指定時、遷移先のシーンに変数を渡せます。
[call], [return]: サブルーチン
一時的に別の場所の処理を呼び出し、終わったら元の場所に戻ってくる機能です。共通のイベントなどを部品化するのに便利です。
[call]で target や storage を指定して呼び出し、サブルーチンの最後に[return]を記述します。
</details>
カテゴリ: キャラクター・画像
画面を華やかに彩ります。
<details>
<summary><strong>主要な画像操作タグ</strong></summary>
[chara_show]: キャラクターを表示します。
name (必須): キャラクターの管理名。セリフの話者名と一致させます。
storage (必須): アセットの画像キー。
pos: left, center, rightから選択。x, yでの座標指定も可能。
time: フェードイン時間（ミリ秒）。
nowait="true": アニメーションの完了を待たずに次の処理へ進みます。
[chara_mod]: 表示中のキャラクターの画像を差し替えます。（表情差分など）
name (必須): 対象キャラクターのname。
storage (必須): 新しい画像キー。
time: クロスフェードの時間（ミリ秒）。
[chara_hide]: キャラクターを消去します。
name (必須): 対象キャラクターのname。
time: フェードアウト時間（ミリ秒）。
[bg]: 背景を表示します。
storage (必須): 画像キー。
time: フェードイン/クロスフェードの時間（ミリ秒）。
[image] / [freeimage]: CGなどの前景画像を表示・消去します。chara_showと似たパラメータが使えます。
</details>
カテゴリ: 演出・音声
ゲーム体験を豊かにします。
<details>
<summary><strong>主要な演出・音声タグ</strong></summary>
[shake]: 画面を揺らします。
time (必須): 揺れる時間（ミリ秒）。
power: 揺れの強さ。
[flash]: 画面を特定の色で一瞬光らせます。
color: 0xffffff（白）のような16進数カラーコード。
time: フラッシュの時間。
[playbgm] / [stopbgm]: BGMの再生と停止。
storage (必須): BGMのキー。
loop: true (デフォルト) or false。
[stopbgm]では time でフェードアウト時間を指定できます。
[playse]: 効果音を再生します。
</details>
カテゴリ: 変数操作・その他
<details>
<summary><strong>主要なユーティリティタグ</strong></summary>
[eval]: ゲーム変数(f.)やシステム変数(sf.)の値を直接操作する、非常に強力なタグです。
exp (必須): 実行するJavaScript式を記述します。
例: [eval exp="f.love = f.love + 10"]
[wait]: 指定時間、処理を待ちます。
time (必須): 待機する時間（ミリ秒）。1000で1秒。
[hidewindow] / [showwindow]: メッセージウィンドウを非表示/表示します。
</details>
6. ゲームの拡張（プログラマー向け）
このセクションは、エンジンに新しい機能を追加したい開発者向けの技術情報です。
6.1. 新規タグの追加
src/handlers/にハンドラファイル (new_tag.jsなど) を作成します。
src/handlers/index.jsを開き、作成したファイルをimportし、tagHandlersオブジェクトに1行追加します。
これだけで、エンジンは新しいタグを自動的に認識します。GameScene.jsを触る必要はありません。
6.2. ⭐【最重要】新規ゲームシーン開発の5ヶ条⭐
ノベルパートから遷移する、新しいゲームシーン（バトルシーン、パズルシーンなど）を作る際は、以下のルールを必ず守ってください。これは、エンジン全体の安定性を保つための契約です。
create()の最後にscene-readyを発行する
シーンの準備がすべて完了した最後に、必ずthis.events.emit('scene-ready');を記述します。これがSystemSceneへの「準備完了」の合図です。
BGMはcreate()で再生する
シーンが始まったら、this.soundManager.playBgm('曲名');でBGMの再生を「命令」するだけです。SoundManagerが前の曲を賢く止めてくれます。
ノベルシーンへの復帰はSystemSceneに依頼する
シーンを終了する際は、必ずthis.scene.get('SystemScene').events.emit('return-to-novel', ...)を発行します。自身のstop()は絶対に呼ばないでください。
shutdown()で後片付けをする
shutdown()メソッドを実装し、そのシーンのcreate()で生成したタイマー (this.time.addEvent) やイベントリスナー (this.events.on) は、必ずここで破棄・解除してください。
HUDは操作しない
シーンの中からHPバーを直接操作しようとしないでください。代わりにthis.stateManager.setF('player_hp', 50);のように状態変数を変更します。UIの更新はUISceneとHUD自身が自動的に行います。
6.3. 動的アセットロード (@asset)
大規模なゲームでは、最初にすべてのアセットを読み込むと起動が遅くなります。@assetを使うと、そのシナリオが必要とするアセットだけを、シナリオ開始直前に自動で読み込ませることができます。
書式: @asset type="種類" key="管理キー" path="ファイルパス"
配置場所: シナリオファイルの先頭（ラベルや地の文より前）に記述してください。
このマニュアルが、あなたの創造の旅の信頼できる羅針盤となることを願っています。
さあ、あなただけの物語を始めましょう！